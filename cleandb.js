const { MongoClient } = require('mongodb');
require('dotenv').config();

// MongoDB connection
const MONGODB_URI = process.env.MONGODB_URI || 'mongodb://localhost:27017/rawstudio';

async function cleanDatabase() {
    let client;
    
    try {
        console.log('üóëÔ∏è ================================');
        console.log('üöÄ Starting Raw Studio Database Cleanup');
        console.log('================================');
        
        // Connect to MongoDB
        console.log('üì° Connecting to MongoDB...');
        client = new MongoClient(MONGODB_URI, {
            useNewUrlParser: true,
            useUnifiedTopology: true
        });
        
        await client.connect();
        console.log('‚úÖ Connected to MongoDB successfully');
        
        const db = client.db('rawstudio');
        
        // Get all collections in the database
        console.log('üìã Fetching all collections...');
        const collections = await db.listCollections().toArray();
        
        if (collections.length === 0) {
            console.log('‚ÑπÔ∏è No collections found in database');
            return;
        }
        
        console.log(`üìä Found ${collections.length} collection(s):`);
        collections.forEach(col => {
            console.log(`   üìÅ ${col.name}`);
        });
        
        console.log('\nüóëÔ∏è Starting cleanup process...');
        
        let totalDropped = 0;
        let totalDocumentsRemoved = 0;
        
        // Drop each collection
        for (const collectionInfo of collections) {
            const collectionName = collectionInfo.name;
            
            try {
                // Count documents before dropping
                const docCount = await db.collection(collectionName).countDocuments();
                console.log(`üîç Collection "${collectionName}": ${docCount} documents`);
                
                // Drop the collection
                const result = await db.collection(collectionName).drop();
                
                if (result) {
                    console.log(`‚úÖ Dropped collection "${collectionName}" (${docCount} documents removed)`);
                    totalDropped++;
                    totalDocumentsRemoved += docCount;
                } else {
                    console.log(`‚ùå Failed to drop collection "${collectionName}"`);
                }
                
            } catch (error) {
                if (error.message.includes('ns not found')) {
                    console.log(`‚ö†Ô∏è Collection "${collectionName}" does not exist (already cleaned)`);
                } else {
                    console.error(`‚ùå Error dropping collection "${collectionName}":`, error.message);
                }
            }
        }
        
        // Summary
        console.log('\nüìä ================================');
        console.log('üéâ CLEANUP SUMMARY');
        console.log('================================');
        console.log(`‚úÖ Collections dropped: ${totalDropped}`);
        console.log(`üóëÔ∏è Total documents removed: ${totalDocumentsRemoved}`);
        console.log(`üåü Database cleaned successfully!`);
        
        // Verify cleanup
        console.log('\nüîç Verifying cleanup...');
        const remainingCollections = await db.listCollections().toArray();
        
        if (remainingCollections.length === 0) {
            console.log('‚úÖ Verification passed: All collections removed');
        } else {
            console.log(`‚ö†Ô∏è Warning: ${remainingCollections.length} collection(s) still exist:`);
            remainingCollections.forEach(col => {
                console.log(`   üìÅ ${col.name}`);
            });
        }
        
    } catch (error) {
        console.error('‚ùå Database cleanup failed:', error.message);
        
        if (error.message.includes('authentication failed')) {
            console.log('\nüí° TROUBLESHOOTING:');
            console.log('   ‚Ä¢ Check your MongoDB URI in .env file');
            console.log('   ‚Ä¢ Verify your database credentials');
            console.log('   ‚Ä¢ Ensure your IP is whitelisted in MongoDB Atlas');
        } else if (error.message.includes('ENOTFOUND')) {
            console.log('\nüí° TROUBLESHOOTING:');
            console.log('   ‚Ä¢ Check your internet connection');
            console.log('   ‚Ä¢ Verify the MongoDB cluster hostname');
            console.log('   ‚Ä¢ Check if MongoDB Atlas is accessible');
        }
        
        process.exit(1);
        
    } finally {
        // Close connection
        if (client) {
            await client.close();
            console.log('üîå MongoDB connection closed');
        }
        
        console.log('================================');
        console.log('üèÅ Cleanup process completed');
        console.log('================================\n');
    }
}

// Add command line interface
if (process.argv.includes('--confirm')) {
    cleanDatabase();
} else {
    console.log('üö® ================================');
    console.log('‚ö†Ô∏è  WARNING: DATABASE CLEANUP');
    console.log('================================');
    console.log('This will permanently delete ALL data in your Raw Studio database!');
    console.log('\nüìã What will be deleted:');
    console.log('   ‚Ä¢ All visitor tracking data');
    console.log('   ‚Ä¢ All analytics history');
    console.log('   ‚Ä¢ All collections and documents');
    console.log('\n‚ö†Ô∏è  THIS ACTION CANNOT BE UNDONE!');
    console.log('\nüîß To proceed, run:');
    console.log('   node cleandb.js --confirm');
    console.log('\n‚ùå Operation cancelled for safety');
}
